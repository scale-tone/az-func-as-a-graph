{"version":3,"sources":["shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","shared/CounterState.ts","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityName","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyAllEntityStates","entityId","EntityStates","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","Promise","resolve","reject","response","correlationId","parse","SignalResultPromises","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","stateContainer","Error","diff","rfc6902","entityAdded","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","item","GetEntityId","Trace","entityDeleted","expectedVersion","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","tryToReconnect","Information","start","SignalRReconnectIntervalInMs","setup","l","console","counterState","title","countContainer","count","history","App","observer","className","onClick","map","n","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ec98c0b.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityName = this._entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): void {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityName] = this.items;\r\n\r\n        // Loading all existing entities\r\n        DurableEntitySet.fetchAndApplyAllEntityStates(this._entityName);\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityName, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates[entityId]) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityName, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n        if (!!this.EntityStates[entityId]) {\r\n            // If it is a known entity, then just returning it\r\n            return this.EntityStates[entityId].state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityName, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static EntityStates: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n\r\n    private static entityAdded(entityName: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityName];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityName: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityName];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityName: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                (stateContainer.state as any).entityKey = currentEntityState.entityKey; // Need to preserve the entityKey field, if it is set\r\n                const diff = rfc6902.createPatch(currentEntityState, stateContainer.state);\r\n                rfc6902.applyPatch(currentEntityState, diff);\r\n            }\r\n\r\n            if (!this.EntityStates[entityId]) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates[entityId] = { state: currentEntityState, version: stateContainer.version };\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityName, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityName: string): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                makeAutoObservable(stateContainer.state);\r\n                this.EntityStates[entityId] = stateContainer;\r\n\r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, stateContainer.state as any);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        if (msg.isEntityDestructed) {\r\n\r\n            delete this.EntityStates[entityId];\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!this.EntityStates[entityId]) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = this.EntityStates[entityId].version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, this.EntityStates[entityId].state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(this.EntityStates[entityId].state, msg.stateDiff);\r\n                this.EntityStates[entityId].version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => {\r\n            var tryToReconnect = () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n                this.SignalRConn.start().then(() => {\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n                }, () => {\r\n                    setTimeout(tryToReconnect, this.SignalRReconnectIntervalInMs);\r\n                })\r\n            }\r\n            tryToReconnect();\r\n        });\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n}","\r\n// Sample entity state\r\nexport class CounterState\r\n{\r\n    title: string = '';\r\n\r\n    countContainer = {\r\n        count: 0\r\n    }\r\n\r\n    history: number[] = [];\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { CounterState } from './shared/CounterState';\r\n\r\n// Optional setup\r\nDurableEntitySet.setup({\r\n\r\n    // Setup with some fake user name. This is for testing purposes only.\r\n    // When deployed to Azure with EasyAuth configured, this name will be replaced with your real user name.\r\n    fakeUserNamePromise: Promise.resolve('test-anonymous-user'),\r\n\r\n    logger: { log: (l, msg: string) => console.log(msg) }\r\n});\r\n\r\nconst entityName = 'CounterEntity';\r\nconst entityKey = 'my-counter';\r\n\r\n// Creating a single CounterEntity and binding to its state\r\nconst counterState = DurableEntitySet.createEntity(entityName, entityKey, new CounterState());\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n        render(): JSX.Element {\r\n            return (<>\r\n                <div className=\"counter-div\">\r\n                    <h3> Title: '{counterState.title}', count: {counterState.countContainer?.count}</h3>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'add', 1)}>\r\n                        Increment\r\n                    </button>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'substract', 1)}>\r\n                        Decrement\r\n                    </button>\r\n                </div>\r\n                <h4>{counterState.history.length ? 'History (last 10 values):' : ''}</h4>\r\n                <ul>\r\n                    {counterState.history.map(n => (<li>{n}</li>))}\r\n                </ul>\r\n            </>);\r\n        }\r\n    }\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}