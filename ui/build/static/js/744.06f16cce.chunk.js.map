{"version":3,"file":"static/js/744.06f16cce.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/classDiagram-v2-656fc6c4.js"],"sourcesContent":["import { p as parser, d as db, s as styles } from \"./styles-a893c203.js\";\nimport { select, curveLinear } from \"d3\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { l as log, c as getConfig, u as utils, p as setupGraphViewbox, o as interpolateToCurve, k as getStylesFromArray, e as common } from \"./mermaid-aad43469.js\";\nimport { r as render } from \"./index-1e7f2254.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-66ea8538.js\";\nimport \"./createText-a49d2d2a.js\";\nimport \"mdast-util-from-markdown\";\nimport \"./svgDraw-95adee0a.js\";\nconst sanitizeText = (txt) => common.sanitizeText(txt, getConfig());\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: void 0\n};\nconst addNamespaces = function(namespaces, g, _id, diagObj) {\n  const keys = Object.keys(namespaces);\n  log.info(\"keys:\", keys);\n  log.info(namespaces);\n  keys.forEach(function(id) {\n    var _a, _b;\n    const vertex = namespaces[id];\n    const shape = \"rect\";\n    const node = {\n      shape,\n      id: vertex.id,\n      domId: vertex.domId,\n      labelText: sanitizeText(vertex.id),\n      labelStyle: \"\",\n      style: \"fill: none; stroke: black\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    addClasses(vertex.classes, g, _id, diagObj, vertex.id);\n    log.info(\"setNode\", node);\n  });\n};\nconst addClasses = function(classes, g, _id, diagObj, parent) {\n  const keys = Object.keys(classes);\n  log.info(\"keys:\", keys);\n  log.info(classes);\n  keys.filter((id) => classes[id].parent == parent).forEach(function(id) {\n    var _a, _b;\n    const vertex = classes[id];\n    const cssClassStr = vertex.cssClasses.join(\" \");\n    const styles2 = { labelStyle: \"\", style: \"\" };\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = \"class_box\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id, parent) || \"\",\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    if (parent) {\n      g.setParent(vertex.id, parent);\n    }\n    log.info(\"setNode\", node);\n  });\n};\nconst addNotes = function(notes, g, startEdgeId, classes) {\n  log.info(notes);\n  notes.forEach(function(note, i) {\n    var _a, _b;\n    const vertex = note;\n    const cssNoteStr = \"\";\n    const styles2 = { labelStyle: \"\", style: \"\" };\n    const vertexText = vertex.text;\n    const radius = 0;\n    const shape = \"note\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: \"\",\n      type: \"note\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    log.info(\"setNode\", node);\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n    const edgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: \"dotted\",\n      // Set link type for rendering\n      arrowhead: \"none\",\n      //Set edge extra labels\n      startLabelRight: \"\",\n      endLabelLeft: \"\",\n      //Set relation arrow types\n      arrowTypeStart: \"none\",\n      arrowTypeEnd: \"none\",\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf.curve, curveLinear)\n    };\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\nconst addRelations = function(relations, g) {\n  const conf2 = getConfig().flowchart;\n  let cnt = 0;\n  relations.forEach(function(edge) {\n    var _a;\n    cnt++;\n    const edgeData = {\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: edge.relation.lineType == 1 ? \"dashed\" : \"solid\",\n      id: \"id\" + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === \"arrow_open\" ? \"none\" : \"normal\",\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === \"none\" ? \"\" : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === \"none\" ? \"\" : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf2 == null ? void 0 : conf2.curve, curveLinear)\n    };\n    log.info(edgeData, edge);\n    if (edge.style !== void 0) {\n      const styles2 = getStylesFromArray(edge.style);\n      edgeData.style = styles2.style;\n      edgeData.labelStyle = styles2.labelStyle;\n    }\n    edge.text = edge.title;\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n      if (((_a = getConfig().flowchart) == null ? void 0 : _a.htmlLabels) ?? getConfig().htmlLabels) {\n        edgeData.labelType = \"html\";\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + \"</span>\";\n      } else {\n        edgeData.labelType = \"text\";\n        edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n        if (edge.style === void 0) {\n          edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none\";\n        }\n        edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n      }\n    }\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\nconst setConf = function(cnf) {\n  conf = {\n    ...conf,\n    ...cnf\n  };\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing class - \", id);\n  const conf2 = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info(\"config:\", conf2);\n  const nodeSpacing = (conf2 == null ? void 0 : conf2.nodeSpacing) ?? 50;\n  const rankSpacing = (conf2 == null ? void 0 : conf2.rankSpacing) ?? 50;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: diagObj.db.getDirection(),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const namespaces = diagObj.db.getNamespaces();\n  const classes = diagObj.db.getClasses();\n  const relations = diagObj.db.getRelations();\n  const notes = diagObj.db.getNotes();\n  log.info(relations);\n  addNamespaces(namespaces, g, id, diagObj);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(\n    element,\n    g,\n    [\"aggregation\", \"extension\", \"composition\", \"dependency\", \"lollipop\"],\n    \"classDiagram\",\n    id\n  );\n  utils.insertTitle(svg, \"classTitleText\", (conf2 == null ? void 0 : conf2.titleTopMargin) ?? 5, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2 == null ? void 0 : conf2.diagramPadding, conf2 == null ? void 0 : conf2.useMaxWidth);\n  if (!(conf2 == null ? void 0 : conf2.htmlLabels)) {\n    const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\nfunction getArrowMarker(type) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = \"aggregation\";\n      break;\n    case 1:\n      marker = \"extension\";\n      break;\n    case 2:\n      marker = \"composition\";\n      break;\n    case 3:\n      marker = \"dependency\";\n      break;\n    case 4:\n      marker = \"lollipop\";\n      break;\n    default:\n      marker = \"none\";\n  }\n  return marker;\n}\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["sanitizeText","txt","common","getConfig","conf","dividerMargin","padding","textHeight","curve","addNamespaces","namespaces","g","_id","diagObj","keys","Object","log","info","forEach","id","_a","_b","vertex","node","shape","domId","labelText","labelStyle","style","flowchart","class","setNode","addClasses","classes","parent","filter","cssClassStr","cssClasses","join","styles2","vertexText","label","classData","rx","ry","tooltip","db","getTooltip","haveCallback","link","width","type","setParent","addNotes","notes","startEdgeId","note","i","text","noteData","edgeId","edgeData","pattern","arrowhead","startLabelRight","endLabelLeft","arrowTypeStart","arrowTypeEnd","interpolateToCurve","curveLinear","setEdge","addRelations","relations","conf2","cnt","edge","relation","lineType","relationTitle1","relationTitle2","getArrowMarker","type1","type2","getStylesFromArray","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","lineBreakRegex","id1","id2","draw","_version","securityLevel","nodeSpacing","rankSpacing","graphlib","multigraph","compound","setGraph","rankdir","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getNamespaces","getClasses","getRelations","getNotes","length","sandboxElement","select","root","nodes","contentDocument","body","svg","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","marker","renderer","setConf","cnf","diagram","parser","styles","init","arrowMarkerAbsolute","clear"],"sourceRoot":""}