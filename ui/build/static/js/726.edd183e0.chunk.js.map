{"version":3,"file":"static/js/726.edd183e0.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/clone.js","../node_modules/dagre-d3-es/src/graphlib/json.js","../node_modules/mermaid/dist/index-1e7f2254.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-66ea8538.js\";\nimport { l as log, n as evaluate, c as getConfig } from \"./mermaid-aad43469.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as createText } from \"./createText-a49d2d2a.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\n  await recursiveRender(elem, graph, diagramtype);\n};\nexport {\n  render as r\n};\n"],"names":["value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancenstorId","log","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","hasChildren","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","shapes","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","insertCluster","elem","recursiveRender","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","Promise","all","map","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","positionNode","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3"],"sourceRoot":""}