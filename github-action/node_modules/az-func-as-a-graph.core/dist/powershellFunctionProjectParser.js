"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PowershellFunctionProjectParser = void 0;
var traverseFunctionProjectUtils_1 = require("./traverseFunctionProjectUtils");
var functionProjectParserBase_1 = require("./functionProjectParserBase");
var PowershellFunctionProjectParser = /** @class */ (function (_super) {
    __extends(PowershellFunctionProjectParser, _super);
    function PowershellFunctionProjectParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowershellFunctionProjectParser.prototype.traverseFunctions = function (projectFolder) {
        return __awaiter(this, void 0, void 0, function () {
            var functions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fileSystemWrapper.readFunctionsJson(projectFolder, this._log)];
                    case 1:
                        functions = _a.sent();
                        return [4 /*yield*/, this.mapOrchestratorsAndActivitiesAsync(functions, projectFolder)];
                    case 2:
                        // Now enriching it with more info extracted from code
                        functions = _a.sent();
                        return [2 /*return*/, functions];
                }
            });
        });
    };
    PowershellFunctionProjectParser.prototype.getFunctionsAndTheirCodesAsync = function (functionNames, hostJsonFolder) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = functionNames.map(function (name) { return __awaiter(_this, void 0, void 0, function () {
                            var scriptFile, functionJsonMatch, functionJson, match, pos, lineNr;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        scriptFile = 'run\\.ps1$';
                                        return [4 /*yield*/, this._fileSystemWrapper.findFileRecursivelyAsync(this._fileSystemWrapper.joinPath(hostJsonFolder, name), 'function.json$', true)];
                                    case 1:
                                        functionJsonMatch = _a.sent();
                                        if (!!functionJsonMatch) {
                                            functionJson = JSON.parse(functionJsonMatch.code);
                                            if (!!functionJson.scriptFile) {
                                                scriptFile = functionJson.scriptFile.replace('.', '\\.');
                                            }
                                        }
                                        return [4 /*yield*/, this._fileSystemWrapper.findFileRecursivelyAsync(this._fileSystemWrapper.joinPath(hostJsonFolder, name), scriptFile, true)];
                                    case 2:
                                        match = _a.sent();
                                        if (!match) {
                                            return [2 /*return*/, undefined];
                                        }
                                        pos = !match.pos ? 0 : match.pos;
                                        lineNr = traverseFunctionProjectUtils_1.posToLineNr(match.code, pos);
                                        return [2 /*return*/, { name: name, code: match.code, filePath: match.filePath, pos: pos, lineNr: lineNr }];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, (_a.sent()).filter(function (f) { return !!f; })];
                }
            });
        });
    };
    PowershellFunctionProjectParser.prototype.getStartNewOrchestrationRegex = function (orchName) {
        return new RegExp("(Start-DurableOrchestration|Start-NewOrchestration).*-FunctionName\\s*[\"']" + orchName + "[\"']", 'i');
    };
    PowershellFunctionProjectParser.prototype.getCallActivityRegex = function (activityName) {
        return new RegExp("(Invoke-DurableActivity|Invoke-ActivityFunction).*-FunctionName\\s*[\"']" + activityName + "[\"']", 'i');
    };
    PowershellFunctionProjectParser.prototype.getRaiseEventRegex = function (eventName) {
        return new RegExp("Send-DurableExternalEvent.*-EventName\\s*[\"']" + eventName + "[\"']", 'i');
    };
    PowershellFunctionProjectParser.prototype.getWaitForExternalEventRegex = function () {
        return {
            regex: new RegExp("Start-DurableExternalEventListener.*-EventName\\s*[\"']([\\s\\w\\.-]+)[\"']", 'gi'),
            pos: 1
        };
    };
    return PowershellFunctionProjectParser;
}(functionProjectParserBase_1.FunctionProjectParserBase));
exports.PowershellFunctionProjectParser = PowershellFunctionProjectParser;
